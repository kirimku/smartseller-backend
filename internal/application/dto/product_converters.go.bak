package dto

import (
"github.com/shopspring/decimal"

"github.com/kirimku/smartseller-backend/internal/domain/entity"
)

// ProductConverter provides conversion functions between Product entities and DTOs
type ProductConverter struct{}

// NewProductConverter creates a new product converter
func NewProductConverter() *ProductConverter {
	return &ProductConverter{}
}

// ToResponse converts a Product entity to ProductResponse DTO
func (c *ProductConverter) ToResponse(product *entity.Product) ProductResponse {
	response := ProductResponse{
		ID:                product.ID,
		SKU:               product.SKU,
		Name:              product.Name,
		Description:       product.Description,
		CategoryID:        product.CategoryID,
		Brand:             product.Brand,
		Tags:              product.Tags,
		BasePrice:         product.BasePrice,
		SalePrice:         product.SalePrice,
		CostPrice:         product.CostPrice,
		TrackInventory:    product.TrackInventory,
		StockQuantity:     product.StockQuantity,
		LowStockThreshold: product.LowStockThreshold,
		Status:            string(product.Status),
		MetaTitle:         product.MetaTitle,
		MetaDescription:   product.MetaDescription,
		Slug:              product.Slug,
		Weight:            product.Weight,
		DimensionsLength:  product.DimensionsLength,
		DimensionsWidth:   product.DimensionsWidth,
		DimensionsHeight:  product.DimensionsHeight,
		CreatedBy:         product.CreatedBy,
		CreatedAt:         product.CreatedAt,
		UpdatedAt:         product.UpdatedAt,
	}

	// Calculate effective price
	if product.SalePrice != nil {
		response.EffectivePrice = *product.SalePrice
	} else {
		response.EffectivePrice = product.BasePrice
	}

	// Calculate profit margin if cost price is available
	if product.CostPrice != nil && !product.CostPrice.IsZero() {
		profitAmount := response.EffectivePrice.Sub(*product.CostPrice)
		profitMargin := profitAmount.Div(*product.CostPrice).Mul(decimal.NewFromInt(100))
		response.ProfitMargin = &profitMargin
	}

	// Check if stock is low
	if product.LowStockThreshold != nil {
		response.IsLowStock = product.StockQuantity <= *product.LowStockThreshold
	}

	return response
}

// ToResponseList converts a slice of Product entities to ProductListResponse
func (c *ProductConverter) ToResponseList(products []entity.Product, total int, page int, pageSize int) ProductListResponse {
	items := make([]ProductSummary, len(products))
	
	for i, product := range products {
		summary := ProductSummary{
			ID:             product.ID,
			SKU:            product.SKU,
			Name:           product.Name,
			Brand:          product.Brand,
			BasePrice:      product.BasePrice,
			SalePrice:      product.SalePrice,
			Status:         string(product.Status),
			StockQuantity:  product.StockQuantity,
			CreatedAt:      product.CreatedAt,
			UpdatedAt:      product.UpdatedAt,
		}

		// Calculate effective price
		if product.SalePrice != nil {
			summary.EffectivePrice = *product.SalePrice
		} else {
			summary.EffectivePrice = product.BasePrice
		}

		// Check if stock is low
		if product.LowStockThreshold != nil {
			summary.IsLowStock = product.StockQuantity <= *product.LowStockThreshold
		}

		items[i] = summary
	}

	return ProductListResponse{
		Products: items,
		Pagination: PaginationResponse{
			Page:       page,
			PageSize:   pageSize,
			Total:      total,
			TotalPages: (total + pageSize - 1) / pageSize,
		},
	}
}
